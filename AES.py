#AES
# Rijndael S-box
s_box = [
0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
		0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
		0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
		0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
		0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
		0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
		0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
		0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
		0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
		0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
		0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
		0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
		0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
		0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
		0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
		0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
]

# Rijndael S-box-Inverse
s_box_inv = [
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
]

# Chứa các giá trị được tạo bởi x^(i-1) mod (x^8 + x^4 + x^3 + x + 1) trong trường Galois Field (2^8)
Rcon = [
    0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
	0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39,
	0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
	0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8,
	0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef,
	0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
	0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b,
	0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
	0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94,
	0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
	0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
	0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f,
	0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
	0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63,
	0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd,
	0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb
]

# Hàm tính xtime trong Galois Field (2^8)
def xtime(x):
    return ((x << 1) ^ ((x >> 7 & 1) * 0x1b)) & 0xFF

# Hàm nhân hai số trong GF(2^8)
def Multiply(x, y):
    return ((y & 1) * x) ^ ((y >> 1 & 1) * xtime(x)) ^ ((y >> 2 & 1) * xtime(xtime(x))) ^ \
           ((y >> 3 & 1) * xtime(xtime(xtime(x)))) ^ ((y >> 4 & 1) * xtime(xtime(xtime(xtime(x)))))

# Hàm mở rộng khóa từ khóa chính ban đầu
def expand_keys(Key, keyLength, blockSize, rounds, Rcon):
    roundKey = [0] * (blockSize * (rounds + 1) * 4)  # Danh sách chứa tất cả khóa vòng
    i = 0

    # Sử dụng khóa chính ban đầu cho các byte đầu tiên của khóa vòng
    while i < keyLength:
        roundKey[i * 4] = Key[i * 4]
        roundKey[i * 4 + 1] = Key[i * 4 + 1]
        roundKey[i * 4 + 2] = Key[i * 4 + 2]
        roundKey[i * 4 + 3] = Key[i * 4 + 3]
        i += 1

    # Mở rộng từng khóa vòng tiếp theo dựa trên khóa vòng trước đó
    while i < (blockSize * (rounds + 1)):
        # Lấy 4 byte cuối cùng của khóa vòng trước
        temp = [
            roundKey[(i - 1) * 4],
            roundKey[(i - 1) * 4 + 1],
            roundKey[(i - 1) * 4 + 2],
            roundKey[(i - 1) * 4 + 3]
        ]

        if i % keyLength == 0:
            # Xoay vòng trái 1 byte (RotWord)
            temp = temp[1:] + temp[:1]

            # Áp dụng S-box cho từng byte (SubWord)
            temp = [s_box[b] for b in temp]

            # XOR với giá trị Rcon tương ứng
            temp[0] ^= Rcon[i // keyLength]

        # Nếu khóa dài (AES-256) và ở vị trí thứ 4 của nhóm 8
        elif keyLength > 6 and i % keyLength == 4:
            temp = [s_box[b] for b in temp]

        # Tính khóa vòng hiện tại bằng XOR với khóa cách đó keyLength
        roundKey[i * 4] = roundKey[(i - keyLength) * 4] ^ temp[0]
        roundKey[i * 4 + 1] = roundKey[(i - keyLength) * 4 + 1] ^ temp[1]
        roundKey[i * 4 + 2] = roundKey[(i - keyLength) * 4 + 2] ^ temp[2]
        roundKey[i * 4 + 3] = roundKey[(i - keyLength) * 4 + 3] ^ temp[3]

        i += 1
    return roundKey

def add_round_key(round, state, roundKey, blockSize):
    for i in range(4):
        for j in range(4):
            # Lấy giá trị từ roundKey tương ứng và XOR với state
            state[j][i] ^= roundKey[round * blockSize * 4 + i * blockSize + j]

def sub_bytes(state):
    for i in range(4):
        for j in range(4):
            # Lấy giá trị từ S-box cho mỗi phần tử trong state
            state[i][j] = s_box[state[i][j]]

def inv_sub_bytes(state):
    for i in range(4):
        for j in range(4):
            # Lấy giá trị từ S-box cho mỗi phần tử trong state
            state[i][j] = s_box_inv[state[i][j]]

def shift_rows(state):
    # First row by 1 (shift left)
    state[1] = [state[1][1], state[1][2], state[1][3], state[1][0]]

    # Second row by 2 (shift left)
    state[2] = [state[2][2], state[2][3], state[2][0], state[2][1]]

    # Third row by 3 (shift left)
    state[3] = [state[3][3], state[3][0], state[3][1], state[3][2]]

def inv_shift_rows(state):
    # First row by 1 (shift right)
    state[1] = [state[1][3], state[1][0], state[1][1], state[1][2]]

    # Second row by 2 (shift right)
    state[2] = [state[2][2], state[2][3], state[2][0], state[2][1]]

    # Third row by 3 (shift right)
    state[3] = [state[3][1], state[3][2], state[3][3], state[3][0]]

def mix_columns(state):
    for i in range(4):
        x0 = state[0][i]
        x1 = state[1][i]
        x2 = state[2][i]
        x3 = state[3][i]

        t = x0 ^ x1 ^ x2 ^ x3

        tmp = x0
        state[0][i] ^= t ^ xtime(x0 ^ x1)
        state[1][i] ^= t ^ xtime(x1 ^ x2)
        state[2][i] ^= t ^ xtime(x2 ^ x3)
        state[3][i] ^= t ^ xtime(x3 ^ tmp)



def inv_mix_columns(state):
    # Ma trận hệ số ngược
    mix_matrix = [
        [0x0e, 0x0b, 0x0d, 0x09],
        [0x09, 0x0e, 0x0b, 0x0d],
        [0x0d, 0x09, 0x0e, 0x0b],
        [0x0b, 0x0d, 0x09, 0x0e]
    ]

    for i in range(4):
        # Lấy các giá trị trong cột
        column = [state[j][i] for j in range(4)]

        # Tính giá trị mới cho mỗi phần tử trong cột
        for j in range(4):
            state[j][i] = 0
            for k in range(4):
                state[j][i] ^= Multiply(column[k], mix_matrix[j][k])

# Mã hóa
def Encrypt(blockSize, rounds, state, plaintext, encrypted, roundKey):
    # Sao chép dữ liệu plaintext vào ma trận state
    for i in range(4):
        for j in range(4):
            state[j][i] = plaintext[i * 4 + j]

    # Thêm round key đầu tiên vào state trước khi bắt đầu các vòng
    add_round_key(0, state, roundKey, blockSize)

    # Các vòng lặp từ 1 đến rounds - 1 đều thực hiện giống nhau
    for round in range(1, rounds):
        sub_bytes(state)       # Thực hiện thay thế byte
        shift_rows(state)    # Dịch các dòng trong ma trận
        mix_columns(state)     # Trộn các cột trong ma trận
        add_round_key(round, state, roundKey, blockSize)  # Thêm round key cho vòng hiện tại

    # Vòng cuối cùng không có Mix_Columns()
    sub_bytes(state)        # Thực hiện thay thế byte
    shift_rows(state)       # Dịch các dòng trong ma trận
    add_round_key(rounds, state, roundKey, blockSize)  # Thêm round key cho vòng cuối

    # Sao chép ma trận state vào kết quả mã hóa (encrypted)
    for i in range(4):
        for j in range(4):
            encrypted[i * 4 + j] = state[j][i]

# Giải mã
def Decrypt(blockSize, rounds, state, plaintext, encrypted, roundKey):
    # Sao chép dữ liệu cyphertext vào ma trận state
    for i in range(4):
        for j in range(4):
            state[j][i] = encrypted[i * 4 + j]

    # Thêm round key cuối cùng vào state trước khi bắt đầu các vòng
    add_round_key(rounds, state, roundKey, blockSize)

    # Các vòng giải mã từ rounds-1 đến 1
    for round in range(rounds - 1, 0, -1):
        inv_shift_rows(state)      # Dịch ngược các dòng trong ma trận
        inv_sub_bytes(state)       # Thực hiện thay thế byte ngược
        add_round_key(round, state, roundKey, blockSize)  # Thêm round key cho vòng hiện tại
        inv_mix_columns(state)     # Giải mã trộn các cột trong ma trận

    # Vòng cuối cùng không có Inv_Mix_Columns()
    inv_shift_rows(state)          # Dịch ngược các dòng trong ma trận
    inv_sub_bytes(state)         # Thực hiện thay thế byte ngược
    add_round_key(0, state, roundKey, blockSize)          # Thêm round key cho vòng đầu tiên

    # Sao chép ma trận state vào kết quả giải mã (plaintext)
    for i in range(4):
        for j in range(4):
            plaintext[i * 4 + j] = state[j][i]

def main():
    blockSize = 4 # AES block size (Nb = 4 => 4 words = 16 bytes)
    rounds = 0
    Key = [0] * 32 # Max 256-bit = 32 bytes
    plaintext = [0] * 16  # 128-bit block
    encrypted = [0] * 16

    state = [[0] * 4 for _ in range(4)]
    # Nhập độ dài khóa
    while rounds not in (128, 192, 256):
        try:
            rounds = int(input("Length of Key? (128, 192 or 256): "))
        except ValueError:
            continue

    # Tính toán keyLength và rounds
    keyLength = rounds // 32
    rounds = keyLength + 6

    # Nhập khóa dưới dạng HEX
    key_input = input("Key in HEX (cách nhau bằng khoảng trắng): ").split()
    for i in range(keyLength * 4):
        Key[i] = int(key_input[i], 16)

    # Nhập plaintext
    plaintext_input = input("Plaintext in HEX (cách nhau bằng khoảng trắng): ").split()
    for i in range(blockSize * 4):
        plaintext[i] = int(plaintext_input[i], 16)

    # Mở rộng khóa và mã hóa
    roundKey = expand_keys(Key, keyLength, blockSize, rounds, Rcon)
    Encrypt(blockSize, rounds, state, plaintext, encrypted, roundKey)

    print("\nEncrypted:")
    for i in range(keyLength * blockSize):
        print(f"{encrypted[i]:02x}", end=' ')
    print("\n")

    # Nhập lại khóa để giải mã
    key_input = input("Key in HEX (cách nhau bằng khoảng trắng): ").split()
    for i in range(keyLength * 4):
        Key[i] = int(key_input[i], 16)

    ciphertext_input = input("Ciphertext in HEX (cách nhau bằng khoảng trắng): ").split()
    for i in range(blockSize * 4):
        encrypted[i] = int(ciphertext_input[i], 16)

    roundKey = expand_keys(Key, keyLength, blockSize, rounds, Rcon)
    Decrypt(blockSize, rounds, state, plaintext, encrypted, roundKey)

    print("\nDecrypted:")
    for i in range(blockSize * 4):
        print(f"{plaintext[i]:02x}", end=' ')
    print("\n")

if __name__ == "__main__":
    main()
